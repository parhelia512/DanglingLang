// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  CELESTINO
// DateTime: 11/07/2013 15.59.02
// UserName: Alessio
// Input file <D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y - 11/07/2013 15.35.37>

// options: lines report gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace DanglingLang.Tokenizer
{
public enum Tokens {
    error=127,EOF=128,NUM=129,ID=130,BOOL=131,INT=132,
    VOID=133,IF=134,LOAD=135,RETURN=136,STRUCT=137,WHILE=138,
    TRUE=139,FALSE=140,AND=141,DOT=142,EQUAL=143,LEQ=144,
    LESS_THAN=145,MAX=146,MIN=147,OR=148,PRINT=149,NEWLINE=150,
    UMINUS=151};

public struct ValueType
#line 2 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{
#line 3 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal int intValue;
#line 4 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal string identifier;
#line 5 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal Exp exp;
#line 6 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal StructValue structValue;
#line 7 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal StructDecl structDecl;
#line 8 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal FunctionDecl functionDecl;
#line 9 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal FunctionCall functionCall;
#line 10 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal Stmt stmt;
#line 11 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal List<Stmt> stmts;
#line 12 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y - 11/07/2013 15.35.37
#line 43 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal FunctionDecl Prog;
  // End verbatim content from D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y - 11/07/2013 15.35.37

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[60];
  private static State[] states = new State[138];
  private static string[] nonTerms = new string[] {
      "exp", "structFieldValues", "structFieldDecl", "funcParams", "funcArgs", 
      "stmt", "topstmt", "stmts", "topstmts", "prog", "type", "$accept", };

  static Parser() {
    states[0] = new State(-3,new int[]{-10,1,-9,3});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{150,6,129,38,139,39,140,40,137,76,43,48,45,50,146,52,147,58,40,64,130,88,126,73,123,92,134,96,138,101,149,106,136,111,131,84,132,85,133,126,135,134,128,-2},new int[]{-7,4,-6,5,-1,7,-11,113});
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(-12);
    states[7] = new State(new int[]{142,8,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,150,-15,129,-15,139,-15,140,-15,137,-15,146,-15,147,-15,40,-15,130,-15,126,-15,123,-15,134,-15,138,-15,149,-15,136,-15,131,-15,132,-15,133,-15,135,-15,128,-15,125,-15});
    states[8] = new State(new int[]{130,9});
    states[9] = new State(new int[]{61,10,142,-45,43,-45,45,-45,42,-45,47,-45,37,-45,33,-45,94,-45,141,-45,148,-45,143,-45,144,-45,145,-45,150,-45,129,-45,139,-45,140,-45,137,-45,146,-45,147,-45,40,-45,130,-45,126,-45,123,-45,134,-45,138,-45,149,-45,136,-45,131,-45,132,-45,133,-45,135,-45,128,-45,125,-45});
    states[10] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,11});
    states[11] = new State(new int[]{150,12,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[12] = new State(-13);
    states[13] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,14});
    states[14] = new State(new int[]{43,-26,45,-26,42,17,47,19,37,21,33,23,94,24,141,-26,148,-26,143,-26,144,-26,145,-26,142,36,150,-26,129,-26,139,-26,140,-26,137,-26,146,-26,147,-26,40,-26,130,-26,126,-26,123,-26,134,-26,138,-26,149,-26,136,-26,131,-26,132,-26,133,-26,135,-26,128,-26,125,-26,44,-26,41,-26});
    states[15] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,16});
    states[16] = new State(new int[]{43,-27,45,-27,42,17,47,19,37,21,33,23,94,24,141,-27,148,-27,143,-27,144,-27,145,-27,142,36,150,-27,129,-27,139,-27,140,-27,137,-27,146,-27,147,-27,40,-27,130,-27,126,-27,123,-27,134,-27,138,-27,149,-27,136,-27,131,-27,132,-27,133,-27,135,-27,128,-27,125,-27,44,-27,41,-27});
    states[17] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,18});
    states[18] = new State(new int[]{43,-28,45,-28,42,-28,47,-28,37,-28,33,23,94,24,141,-28,148,-28,143,-28,144,-28,145,-28,142,36,150,-28,129,-28,139,-28,140,-28,137,-28,146,-28,147,-28,40,-28,130,-28,126,-28,123,-28,134,-28,138,-28,149,-28,136,-28,131,-28,132,-28,133,-28,135,-28,128,-28,125,-28,44,-28,41,-28});
    states[19] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,20});
    states[20] = new State(new int[]{43,-29,45,-29,42,-29,47,-29,37,-29,33,23,94,24,141,-29,148,-29,143,-29,144,-29,145,-29,142,36,150,-29,129,-29,139,-29,140,-29,137,-29,146,-29,147,-29,40,-29,130,-29,126,-29,123,-29,134,-29,138,-29,149,-29,136,-29,131,-29,132,-29,133,-29,135,-29,128,-29,125,-29,44,-29,41,-29});
    states[21] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,22});
    states[22] = new State(new int[]{43,-30,45,-30,42,-30,47,-30,37,-30,33,23,94,24,141,-30,148,-30,143,-30,144,-30,145,-30,142,36,150,-30,129,-30,139,-30,140,-30,137,-30,146,-30,147,-30,40,-30,130,-30,126,-30,123,-30,134,-30,138,-30,149,-30,136,-30,131,-30,132,-30,133,-30,135,-30,128,-30,125,-30,44,-30,41,-30});
    states[23] = new State(-33);
    states[24] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,25});
    states[25] = new State(new int[]{43,-34,45,-34,42,-34,47,-34,37,-34,33,-34,94,24,141,-34,148,-34,143,-34,144,-34,145,-34,142,36,150,-34,129,-34,139,-34,140,-34,137,-34,146,-34,147,-34,40,-34,130,-34,126,-34,123,-34,134,-34,138,-34,149,-34,136,-34,131,-34,132,-34,133,-34,135,-34,128,-34,125,-34,44,-34,41,-34});
    states[26] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,27});
    states[27] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,-40,148,-40,143,30,144,32,145,34,142,36,150,-40,129,-40,139,-40,140,-40,137,-40,146,-40,147,-40,40,-40,130,-40,126,-40,123,-40,134,-40,138,-40,149,-40,136,-40,131,-40,132,-40,133,-40,135,-40,128,-40,125,-40,44,-40,41,-40});
    states[28] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,29});
    states[29] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,-41,143,30,144,32,145,34,142,36,150,-41,129,-41,139,-41,140,-41,137,-41,146,-41,147,-41,40,-41,130,-41,126,-41,123,-41,134,-41,138,-41,149,-41,136,-41,131,-41,132,-41,133,-41,135,-41,128,-41,125,-41,44,-41,41,-41});
    states[30] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,31});
    states[31] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,-42,148,-42,143,-42,144,32,145,34,142,36,150,-42,129,-42,139,-42,140,-42,137,-42,146,-42,147,-42,40,-42,130,-42,126,-42,123,-42,134,-42,138,-42,149,-42,136,-42,131,-42,132,-42,133,-42,135,-42,128,-42,125,-42,44,-42,41,-42});
    states[32] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,33});
    states[33] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,-43,148,-43,143,-43,144,-43,145,-43,142,36,150,-43,129,-43,139,-43,140,-43,137,-43,146,-43,147,-43,40,-43,130,-43,126,-43,123,-43,134,-43,138,-43,149,-43,136,-43,131,-43,132,-43,133,-43,135,-43,128,-43,125,-43,44,-43,41,-43});
    states[34] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,35});
    states[35] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,-44,148,-44,143,-44,144,-44,145,-44,142,36,150,-44,129,-44,139,-44,140,-44,137,-44,146,-44,147,-44,40,-44,130,-44,126,-44,123,-44,134,-44,138,-44,149,-44,136,-44,131,-44,132,-44,133,-44,135,-44,128,-44,125,-44,44,-44,41,-44});
    states[36] = new State(new int[]{130,37});
    states[37] = new State(-45);
    states[38] = new State(-22);
    states[39] = new State(-23);
    states[40] = new State(-24);
    states[41] = new State(new int[]{130,42});
    states[42] = new State(new int[]{123,43});
    states[43] = new State(-49,new int[]{-2,44});
    states[44] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,45});
    states[45] = new State(new int[]{125,46,44,47,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[46] = new State(-25);
    states[47] = new State(-50);
    states[48] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,49});
    states[49] = new State(new int[]{43,-31,45,-31,42,-31,47,-31,37,-31,33,23,94,24,141,-31,148,-31,143,-31,144,-31,145,-31,142,36,150,-31,129,-31,139,-31,140,-31,137,-31,146,-31,147,-31,40,-31,130,-31,126,-31,123,-31,134,-31,138,-31,149,-31,136,-31,131,-31,132,-31,133,-31,135,-31,128,-31,125,-31,44,-31,41,-31});
    states[50] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,51});
    states[51] = new State(new int[]{43,-32,45,-32,42,-32,47,-32,37,-32,33,23,94,24,141,-32,148,-32,143,-32,144,-32,145,-32,142,36,150,-32,129,-32,139,-32,140,-32,137,-32,146,-32,147,-32,40,-32,130,-32,126,-32,123,-32,134,-32,138,-32,149,-32,136,-32,131,-32,132,-32,133,-32,135,-32,128,-32,125,-32,44,-32,41,-32});
    states[52] = new State(new int[]{40,53});
    states[53] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,54});
    states[54] = new State(new int[]{44,55,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[55] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,56});
    states[56] = new State(new int[]{41,57,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[57] = new State(-35);
    states[58] = new State(new int[]{40,59});
    states[59] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,60});
    states[60] = new State(new int[]{44,61,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[61] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,62});
    states[62] = new State(new int[]{41,63,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[63] = new State(-36);
    states[64] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,65});
    states[65] = new State(new int[]{41,66,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[66] = new State(-37);
    states[67] = new State(new int[]{40,68,150,-38,43,-38,45,-38,42,-38,47,-38,37,-38,33,-38,94,-38,141,-38,148,-38,143,-38,144,-38,145,-38,142,-38,129,-38,139,-38,140,-38,137,-38,146,-38,147,-38,130,-38,126,-38,123,-38,134,-38,138,-38,149,-38,136,-38,131,-38,132,-38,133,-38,135,-38,128,-38,125,-38,44,-38,41,-38});
    states[68] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73,41,-54,44,-54},new int[]{-5,69,-1,75});
    states[69] = new State(new int[]{41,70,44,71});
    states[70] = new State(-46);
    states[71] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,72});
    states[72] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36,41,-56,44,-56});
    states[73] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,74});
    states[74] = new State(new int[]{43,-39,45,-39,42,-39,47,-39,37,-39,33,-39,94,-39,141,-39,148,-39,143,-39,144,-39,145,-39,142,36,150,-39,129,-39,139,-39,140,-39,137,-39,146,-39,147,-39,40,-39,130,-39,126,-39,123,-39,134,-39,138,-39,149,-39,136,-39,131,-39,132,-39,133,-39,135,-39,128,-39,125,-39,44,-39,41,-39});
    states[75] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36,41,-55,44,-55});
    states[76] = new State(new int[]{130,77});
    states[77] = new State(new int[]{123,78,130,-59});
    states[78] = new State(new int[]{129,-49,139,-49,140,-49,137,-47,43,-49,45,-49,146,-49,147,-49,40,-49,130,-49,126,-49,125,-47,131,-47,132,-47},new int[]{-2,44,-3,79});
    states[79] = new State(new int[]{125,80,131,84,132,85,137,86},new int[]{-11,81});
    states[80] = new State(-6);
    states[81] = new State(new int[]{130,82});
    states[82] = new State(new int[]{59,83});
    states[83] = new State(-48);
    states[84] = new State(-57);
    states[85] = new State(-58);
    states[86] = new State(new int[]{130,87});
    states[87] = new State(-59);
    states[88] = new State(new int[]{40,68,61,89,142,-38,43,-38,45,-38,42,-38,47,-38,37,-38,33,-38,94,-38,141,-38,148,-38,143,-38,144,-38,145,-38,150,-38,129,-38,139,-38,140,-38,137,-38,146,-38,147,-38,130,-38,126,-38,123,-38,134,-38,138,-38,149,-38,136,-38,131,-38,132,-38,133,-38,135,-38,128,-38,125,-38});
    states[89] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,90});
    states[90] = new State(new int[]{150,91,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[91] = new State(-14);
    states[92] = new State(-10,new int[]{-8,93});
    states[93] = new State(new int[]{125,94,150,6,129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,88,126,73,123,92,134,96,138,101,149,106,136,111},new int[]{-6,95,-1,7});
    states[94] = new State(-16);
    states[95] = new State(-11);
    states[96] = new State(new int[]{40,97});
    states[97] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,98});
    states[98] = new State(new int[]{41,99,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[99] = new State(new int[]{150,6,129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,88,126,73,123,92,134,96,138,101,149,106,136,111},new int[]{-6,100,-1,7});
    states[100] = new State(-17);
    states[101] = new State(new int[]{40,102});
    states[102] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,103});
    states[103] = new State(new int[]{41,104,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[104] = new State(new int[]{150,6,129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,88,126,73,123,92,134,96,138,101,149,106,136,111},new int[]{-6,105,-1,7});
    states[105] = new State(-18);
    states[106] = new State(new int[]{40,107});
    states[107] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73},new int[]{-1,108});
    states[108] = new State(new int[]{41,109,43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36});
    states[109] = new State(new int[]{150,110});
    states[110] = new State(-19);
    states[111] = new State(new int[]{129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,67,126,73,150,-20,123,-20,134,-20,138,-20,149,-20,136,-20,131,-20,132,-20,133,-20,135,-20,128,-20,125,-20},new int[]{-1,112});
    states[112] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,33,23,94,24,141,26,148,28,143,30,144,32,145,34,142,36,150,-21,129,-21,139,-21,140,-21,137,-21,146,-21,147,-21,40,-21,130,-21,126,-21,123,-21,134,-21,138,-21,149,-21,136,-21,131,-21,132,-21,133,-21,135,-21,128,-21,125,-21});
    states[113] = new State(new int[]{130,114});
    states[114] = new State(new int[]{40,115});
    states[115] = new State(new int[]{131,84,132,85,137,86,41,-51,44,-51},new int[]{-4,116,-11,124});
    states[116] = new State(new int[]{41,117,44,121});
    states[117] = new State(new int[]{123,118});
    states[118] = new State(-10,new int[]{-8,119});
    states[119] = new State(new int[]{125,120,150,6,129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,88,126,73,123,92,134,96,138,101,149,106,136,111},new int[]{-6,95,-1,7});
    states[120] = new State(-7);
    states[121] = new State(new int[]{131,84,132,85,137,86},new int[]{-11,122});
    states[122] = new State(new int[]{130,123});
    states[123] = new State(-53);
    states[124] = new State(new int[]{130,125});
    states[125] = new State(-52);
    states[126] = new State(new int[]{130,127});
    states[127] = new State(new int[]{40,128});
    states[128] = new State(new int[]{131,84,132,85,137,86,41,-51,44,-51},new int[]{-4,129,-11,124});
    states[129] = new State(new int[]{41,130,44,121});
    states[130] = new State(new int[]{123,131});
    states[131] = new State(-10,new int[]{-8,132});
    states[132] = new State(new int[]{125,133,150,6,129,38,139,39,140,40,137,41,43,48,45,50,146,52,147,58,40,64,130,88,126,73,123,92,134,96,138,101,149,106,136,111},new int[]{-6,95,-1,7});
    states[133] = new State(-8);
    states[134] = new State(new int[]{40,135});
    states[135] = new State(new int[]{130,136});
    states[136] = new State(new int[]{41,137});
    states[137] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-12, new int[]{-10,128});
    rules[2] = new Rule(-10, new int[]{-9});
    rules[3] = new Rule(-9, new int[]{});
    rules[4] = new Rule(-9, new int[]{-9,-7});
    rules[5] = new Rule(-7, new int[]{-6});
    rules[6] = new Rule(-7, new int[]{137,130,123,-3,125});
    rules[7] = new Rule(-7, new int[]{-11,130,40,-4,41,123,-8,125});
    rules[8] = new Rule(-7, new int[]{133,130,40,-4,41,123,-8,125});
    rules[9] = new Rule(-7, new int[]{135,40,130,41});
    rules[10] = new Rule(-8, new int[]{});
    rules[11] = new Rule(-8, new int[]{-8,-6});
    rules[12] = new Rule(-6, new int[]{150});
    rules[13] = new Rule(-6, new int[]{-1,142,130,61,-1,150});
    rules[14] = new Rule(-6, new int[]{130,61,-1,150});
    rules[15] = new Rule(-6, new int[]{-1});
    rules[16] = new Rule(-6, new int[]{123,-8,125});
    rules[17] = new Rule(-6, new int[]{134,40,-1,41,-6});
    rules[18] = new Rule(-6, new int[]{138,40,-1,41,-6});
    rules[19] = new Rule(-6, new int[]{149,40,-1,41,150});
    rules[20] = new Rule(-6, new int[]{136});
    rules[21] = new Rule(-6, new int[]{136,-1});
    rules[22] = new Rule(-1, new int[]{129});
    rules[23] = new Rule(-1, new int[]{139});
    rules[24] = new Rule(-1, new int[]{140});
    rules[25] = new Rule(-1, new int[]{137,130,123,-2,-1,125});
    rules[26] = new Rule(-1, new int[]{-1,43,-1});
    rules[27] = new Rule(-1, new int[]{-1,45,-1});
    rules[28] = new Rule(-1, new int[]{-1,42,-1});
    rules[29] = new Rule(-1, new int[]{-1,47,-1});
    rules[30] = new Rule(-1, new int[]{-1,37,-1});
    rules[31] = new Rule(-1, new int[]{43,-1});
    rules[32] = new Rule(-1, new int[]{45,-1});
    rules[33] = new Rule(-1, new int[]{-1,33});
    rules[34] = new Rule(-1, new int[]{-1,94,-1});
    rules[35] = new Rule(-1, new int[]{146,40,-1,44,-1,41});
    rules[36] = new Rule(-1, new int[]{147,40,-1,44,-1,41});
    rules[37] = new Rule(-1, new int[]{40,-1,41});
    rules[38] = new Rule(-1, new int[]{130});
    rules[39] = new Rule(-1, new int[]{126,-1});
    rules[40] = new Rule(-1, new int[]{-1,141,-1});
    rules[41] = new Rule(-1, new int[]{-1,148,-1});
    rules[42] = new Rule(-1, new int[]{-1,143,-1});
    rules[43] = new Rule(-1, new int[]{-1,144,-1});
    rules[44] = new Rule(-1, new int[]{-1,145,-1});
    rules[45] = new Rule(-1, new int[]{-1,142,130});
    rules[46] = new Rule(-1, new int[]{130,40,-5,41});
    rules[47] = new Rule(-3, new int[]{});
    rules[48] = new Rule(-3, new int[]{-3,-11,130,59});
    rules[49] = new Rule(-2, new int[]{});
    rules[50] = new Rule(-2, new int[]{-2,-1,44});
    rules[51] = new Rule(-4, new int[]{});
    rules[52] = new Rule(-4, new int[]{-11,130});
    rules[53] = new Rule(-4, new int[]{-4,44,-11,130});
    rules[54] = new Rule(-5, new int[]{});
    rules[55] = new Rule(-5, new int[]{-1});
    rules[56] = new Rule(-5, new int[]{-5,44,-1});
    rules[57] = new Rule(-11, new int[]{131});
    rules[58] = new Rule(-11, new int[]{132});
    rules[59] = new Rule(-11, new int[]{137,130});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // prog -> topstmts
#line 47 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{Prog = new FunctionDecl(); Prog.Name = "$Main"; Prog.ReturnTypeName = "void"; Prog.Body = new Block(ValueStack[ValueStack.Depth-1].stmts);}
        break;
      case 3: // topstmts -> /* empty */
#line 50 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmts = new List<Stmt>();}
        break;
      case 4: // topstmts -> topstmts, topstmt
#line 51 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{if (ValueStack[ValueStack.Depth-1].stmt != null) ValueStack[ValueStack.Depth-2].stmts.Add(ValueStack[ValueStack.Depth-1].stmt); CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts;}
        break;
      case 5: // topstmt -> stmt
#line 54 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
        break;
      case 6: // topstmt -> STRUCT, ID, '{', structFieldDecl, '}'
#line 55 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-2].structDecl.Name = ValueStack[ValueStack.Depth-4].identifier; CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-2].structDecl;}
        break;
      case 7: // topstmt -> type, ID, '(', funcParams, ')', '{', stmts, '}'
#line 56 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-5].functionDecl.Name = ValueStack[ValueStack.Depth-7].identifier; ValueStack[ValueStack.Depth-5].functionDecl.ReturnTypeName = ValueStack[ValueStack.Depth-8].identifier; ValueStack[ValueStack.Depth-5].functionDecl.Body = new Block(ValueStack[ValueStack.Depth-2].stmts); CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-5].functionDecl;}
        break;
      case 8: // topstmt -> VOID, ID, '(', funcParams, ')', '{', stmts, '}'
#line 57 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-5].functionDecl.Name = ValueStack[ValueStack.Depth-7].identifier; ValueStack[ValueStack.Depth-5].functionDecl.ReturnTypeName = "void"; ValueStack[ValueStack.Depth-5].functionDecl.Body = new Block(ValueStack[ValueStack.Depth-2].stmts); CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-5].functionDecl;}
        break;
      case 9: // topstmt -> LOAD, '(', ID, ')'
#line 58 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new LoadStmt(ValueStack[ValueStack.Depth-2].identifier);}
        break;
      case 10: // stmts -> /* empty */
#line 61 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmts = new List<Stmt>();}
        break;
      case 11: // stmts -> stmts, stmt
#line 62 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{if (ValueStack[ValueStack.Depth-1].stmt != null) ValueStack[ValueStack.Depth-2].stmts.Add(ValueStack[ValueStack.Depth-1].stmt); CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts;}
        break;
      case 12: // stmt -> NEWLINE
#line 65 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = null;}
        break;
      case 13: // stmt -> exp, DOT, ID, '=', exp, NEWLINE
#line 66 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new Assignment(ValueStack[ValueStack.Depth-4].identifier, ValueStack[ValueStack.Depth-2].exp, loadExp: ValueStack[ValueStack.Depth-6].exp);}
        break;
      case 14: // stmt -> ID, '=', exp, NEWLINE
#line 67 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new Assignment(ValueStack[ValueStack.Depth-4].identifier, ValueStack[ValueStack.Depth-2].exp, loadExp: null);}
        break;
      case 15: // stmt -> exp
#line 68 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new EvalExp(ValueStack[ValueStack.Depth-1].exp);}
        break;
      case 16: // stmt -> '{', stmts, '}'
#line 69 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new Block(ValueStack[ValueStack.Depth-2].stmts);}
        break;
      case 17: // stmt -> IF, '(', exp, ')', stmt
#line 70 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new If(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].stmt ?? new Block(new List<Stmt>()));}
        break;
      case 18: // stmt -> WHILE, '(', exp, ')', stmt
#line 71 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new While(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].stmt ?? new Block(new List<Stmt>()));}
        break;
      case 19: // stmt -> PRINT, '(', exp, ')', NEWLINE
#line 72 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new Print(ValueStack[ValueStack.Depth-3].exp);}
        break;
      case 20: // stmt -> RETURN
#line 73 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new Return();}
        break;
      case 21: // stmt -> RETURN, exp
#line 74 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.stmt = new Return(ValueStack[ValueStack.Depth-1].exp);}
        break;
      case 22: // exp -> NUM
#line 77 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new IntLiteral(ValueStack[ValueStack.Depth-1].intValue); }
        break;
      case 23: // exp -> TRUE
#line 78 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new BoolLiteral(true); }
        break;
      case 24: // exp -> FALSE
#line 79 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new BoolLiteral(false); }
        break;
      case 25: // exp -> STRUCT, ID, '{', structFieldValues, exp, '}'
#line 80 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-3].structValue.AddValue(ValueStack[ValueStack.Depth-2].exp); ValueStack[ValueStack.Depth-3].structValue.Name = ValueStack[ValueStack.Depth-5].identifier; CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-3].structValue;}
        break;
      case 26: // exp -> exp, '+', exp
#line 81 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Sum(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 27: // exp -> exp, '-', exp
#line 82 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Subtraction(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 28: // exp -> exp, '*', exp
#line 83 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Product(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 29: // exp -> exp, '/', exp
#line 84 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Division(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 30: // exp -> exp, '%', exp
#line 85 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Remainder(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 31: // exp -> '+', exp
#line 86 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp= ValueStack[ValueStack.Depth-1].exp; }
        break;
      case 32: // exp -> '-', exp
#line 87 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp= new Minus(ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 33: // exp -> exp, '!'
#line 88 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp= new Factorial(ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 34: // exp -> exp, '^', exp
#line 89 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Power(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 35: // exp -> MAX, '(', exp, ',', exp, ')'
#line 90 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Max(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 36: // exp -> MIN, '(', exp, ',', exp, ')'
#line 91 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Min(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 37: // exp -> '(', exp, ')'
#line 92 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-2].exp;}
        break;
      case 38: // exp -> ID
#line 93 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Id(ValueStack[ValueStack.Depth-1].identifier); }
        break;
      case 39: // exp -> '~', exp
#line 94 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Not(ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 40: // exp -> exp, AND, exp
#line 95 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new And(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 41: // exp -> exp, OR, exp
#line 96 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Or(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 42: // exp -> exp, EQUAL, exp
#line 97 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Equal(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 43: // exp -> exp, LEQ, exp
#line 98 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new LessEqual(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 44: // exp -> exp, LESS_THAN, exp
#line 99 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new LessThan(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 45: // exp -> exp, DOT, ID
#line 100 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.exp = new Dot(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].identifier);}
        break;
      case 46: // exp -> ID, '(', funcArgs, ')'
#line 101 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-2].functionCall.FunctionName = ValueStack[ValueStack.Depth-4].identifier; CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-2].functionCall;}
        break;
      case 47: // structFieldDecl -> /* empty */
#line 104 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.structDecl = new StructDecl();}
        break;
      case 48: // structFieldDecl -> structFieldDecl, type, ID, ';'
#line 105 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-4].structDecl.AddField(ValueStack[ValueStack.Depth-2].identifier, ValueStack[ValueStack.Depth-3].identifier); CurrentSemanticValue.structDecl = ValueStack[ValueStack.Depth-4].structDecl;}
        break;
      case 49: // structFieldValues -> /* empty */
#line 108 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.structValue = new StructValue();}
        break;
      case 50: // structFieldValues -> structFieldValues, exp, ','
#line 109 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-3].structValue.AddValue(ValueStack[ValueStack.Depth-2].exp); CurrentSemanticValue.structValue = ValueStack[ValueStack.Depth-3].structValue;}
        break;
      case 51: // funcParams -> /* empty */
#line 112 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.functionDecl = new FunctionDecl();}
        break;
      case 52: // funcParams -> type, ID
#line 113 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.functionDecl = new FunctionDecl(); CurrentSemanticValue.functionDecl.AddParam(ValueStack[ValueStack.Depth-1].identifier, ValueStack[ValueStack.Depth-2].identifier);}
        break;
      case 53: // funcParams -> funcParams, ',', type, ID
#line 114 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-4].functionDecl.AddParam(ValueStack[ValueStack.Depth-1].identifier, ValueStack[ValueStack.Depth-2].identifier); CurrentSemanticValue.functionDecl = ValueStack[ValueStack.Depth-4].functionDecl;}
        break;
      case 54: // funcArgs -> /* empty */
#line 117 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.functionCall = new FunctionCall();}
        break;
      case 55: // funcArgs -> exp
#line 118 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.functionCall = new FunctionCall(); CurrentSemanticValue.functionCall.AddArgument(ValueStack[ValueStack.Depth-1].exp);}
        break;
      case 56: // funcArgs -> funcArgs, ',', exp
#line 119 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ValueStack[ValueStack.Depth-3].functionCall.AddArgument(ValueStack[ValueStack.Depth-1].exp); CurrentSemanticValue.functionCall = ValueStack[ValueStack.Depth-3].functionCall;}
        break;
      case 57: // type -> BOOL
#line 122 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.identifier = "bool";}
        break;
      case 58: // type -> INT
#line 123 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.identifier = "int";}
        break;
      case 59: // type -> STRUCT, ID
#line 124 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{CurrentSemanticValue.identifier = ValueStack[ValueStack.Depth-1].identifier;}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 128 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	public Parser(Scanner s) : base(s) {}
}
}
