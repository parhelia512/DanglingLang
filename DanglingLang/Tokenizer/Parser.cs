// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  CELESTINO
// DateTime: 28/06/2013 14.29.49
// UserName: Alessio
// Input file <D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y - 28/06/2013 14.16.50>

// options: lines report gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace DanglingLang.Tokenizer
{
public enum Tokens {
    error=127,EOF=128,NUM=129,ID=130,MAX=131,MIN=132,
    NEWLINE=133,IF=134,WHILE=135,PRINT=136,TRUE=137,FALSE=138,
    AND=139,OR=140,EQUAL=141,LESS_THAN=142,LEQ=143,UMINUS=144};

public struct ValueType
#line 2 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{
#line 3 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal int intValue;
#line 4 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal string identifier;
#line 5 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal Exp exp;
#line 6 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal Stmt stmt;
#line 7 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal List<Stmt> stmts;
#line 8 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y - 28/06/2013 14.16.50
#line 27 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	internal Prog Prog;
  // End verbatim content from D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y - 28/06/2013 14.16.50

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[33];
  private static State[] states = new State[77];
  private static string[] nonTerms = new string[] {
      "exp", "stmt", "stmts", "prog", "$accept", };

  static Parser() {
    states[0] = new State(-3,new int[]{-4,1,-3,3});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{133,5,129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,55,126,53,123,59,134,62,135,67,136,72,128,-2},new int[]{-2,4,-1,6});
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{133,7,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[7] = new State(-6);
    states[8] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,9});
    states[9] = new State(new int[]{43,-15,45,-15,42,12,47,14,37,16,94,18,139,-15,140,-15,141,-15,143,-15,142,-15,133,-15,44,-15,41,-15});
    states[10] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,11});
    states[11] = new State(new int[]{43,-16,45,-16,42,12,47,14,37,16,94,18,139,-16,140,-16,141,-16,143,-16,142,-16,133,-16,44,-16,41,-16});
    states[12] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,13});
    states[13] = new State(new int[]{43,-17,45,-17,42,-17,47,-17,37,-17,94,18,139,-17,140,-17,141,-17,143,-17,142,-17,133,-17,44,-17,41,-17});
    states[14] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,15});
    states[15] = new State(new int[]{43,-18,45,-18,42,-18,47,-18,37,-18,94,18,139,-18,140,-18,141,-18,143,-18,142,-18,133,-18,44,-18,41,-18});
    states[16] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,17});
    states[17] = new State(new int[]{43,-19,45,-19,42,-19,47,-19,37,-19,94,18,139,-19,140,-19,141,-19,143,-19,142,-19,133,-19,44,-19,41,-19});
    states[18] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,19});
    states[19] = new State(new int[]{43,-22,45,-22,42,-22,47,-22,37,-22,94,18,139,-22,140,-22,141,-22,143,-22,142,-22,133,-22,44,-22,41,-22});
    states[20] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,21});
    states[21] = new State(new int[]{43,8,45,10,42,12,47,14,37,16,94,18,139,-28,140,-28,141,24,143,26,142,28,133,-28,44,-28,41,-28});
    states[22] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,23});
    states[23] = new State(new int[]{43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,-29,141,24,143,26,142,28,133,-29,44,-29,41,-29});
    states[24] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,25});
    states[25] = new State(new int[]{43,8,45,10,42,12,47,14,37,16,94,18,139,-30,140,-30,141,-30,143,26,142,28,133,-30,44,-30,41,-30});
    states[26] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,27});
    states[27] = new State(new int[]{43,8,45,10,42,12,47,14,37,16,94,18,139,-31,140,-31,141,-31,143,-31,142,-31,133,-31,44,-31,41,-31});
    states[28] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,29});
    states[29] = new State(new int[]{43,8,45,10,42,12,47,14,37,16,94,18,139,-32,140,-32,141,-32,143,-32,142,-32,133,-32,44,-32,41,-32});
    states[30] = new State(-12);
    states[31] = new State(-13);
    states[32] = new State(-14);
    states[33] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,34});
    states[34] = new State(new int[]{43,-20,45,-20,42,-20,47,-20,37,-20,94,18,139,-20,140,-20,141,-20,143,-20,142,-20,133,-20,44,-20,41,-20});
    states[35] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,36});
    states[36] = new State(new int[]{43,-21,45,-21,42,-21,47,-21,37,-21,94,18,139,-21,140,-21,141,-21,143,-21,142,-21,133,-21,44,-21,41,-21});
    states[37] = new State(new int[]{40,38});
    states[38] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,39});
    states[39] = new State(new int[]{44,40,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[40] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,41});
    states[41] = new State(new int[]{41,42,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[42] = new State(-23);
    states[43] = new State(new int[]{40,44});
    states[44] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,45});
    states[45] = new State(new int[]{44,46,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[46] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,47});
    states[47] = new State(new int[]{41,48,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[48] = new State(-24);
    states[49] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,50});
    states[50] = new State(new int[]{41,51,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[51] = new State(-25);
    states[52] = new State(-26);
    states[53] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,54});
    states[54] = new State(-27);
    states[55] = new State(new int[]{61,56,133,-26,43,-26,45,-26,42,-26,47,-26,37,-26,94,-26,139,-26,140,-26,141,-26,143,-26,142,-26});
    states[56] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,57});
    states[57] = new State(new int[]{133,58,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[58] = new State(-7);
    states[59] = new State(-3,new int[]{-3,60});
    states[60] = new State(new int[]{125,61,133,5,129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,55,126,53,123,59,134,62,135,67,136,72},new int[]{-2,4,-1,6});
    states[61] = new State(-8);
    states[62] = new State(new int[]{40,63});
    states[63] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,64});
    states[64] = new State(new int[]{41,65,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[65] = new State(new int[]{133,5,129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,55,126,53,123,59,134,62,135,67,136,72},new int[]{-2,66,-1,6});
    states[66] = new State(-9);
    states[67] = new State(new int[]{40,68});
    states[68] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,69});
    states[69] = new State(new int[]{41,70,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[70] = new State(new int[]{133,5,129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,55,126,53,123,59,134,62,135,67,136,72},new int[]{-2,71,-1,6});
    states[71] = new State(-10);
    states[72] = new State(new int[]{40,73});
    states[73] = new State(new int[]{129,30,137,31,138,32,43,33,45,35,131,37,132,43,40,49,130,52,126,53},new int[]{-1,74});
    states[74] = new State(new int[]{41,75,43,8,45,10,42,12,47,14,37,16,94,18,139,20,140,22,141,24,143,26,142,28});
    states[75] = new State(new int[]{133,76});
    states[76] = new State(-11);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-4,128});
    rules[2] = new Rule(-4, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-3,-2});
    rules[5] = new Rule(-2, new int[]{133});
    rules[6] = new Rule(-2, new int[]{-1,133});
    rules[7] = new Rule(-2, new int[]{130,61,-1,133});
    rules[8] = new Rule(-2, new int[]{123,-3,125});
    rules[9] = new Rule(-2, new int[]{134,40,-1,41,-2});
    rules[10] = new Rule(-2, new int[]{135,40,-1,41,-2});
    rules[11] = new Rule(-2, new int[]{136,40,-1,41,133});
    rules[12] = new Rule(-1, new int[]{129});
    rules[13] = new Rule(-1, new int[]{137});
    rules[14] = new Rule(-1, new int[]{138});
    rules[15] = new Rule(-1, new int[]{-1,43,-1});
    rules[16] = new Rule(-1, new int[]{-1,45,-1});
    rules[17] = new Rule(-1, new int[]{-1,42,-1});
    rules[18] = new Rule(-1, new int[]{-1,47,-1});
    rules[19] = new Rule(-1, new int[]{-1,37,-1});
    rules[20] = new Rule(-1, new int[]{43,-1});
    rules[21] = new Rule(-1, new int[]{45,-1});
    rules[22] = new Rule(-1, new int[]{-1,94,-1});
    rules[23] = new Rule(-1, new int[]{131,40,-1,44,-1,41});
    rules[24] = new Rule(-1, new int[]{132,40,-1,44,-1,41});
    rules[25] = new Rule(-1, new int[]{40,-1,41});
    rules[26] = new Rule(-1, new int[]{130});
    rules[27] = new Rule(-1, new int[]{126,-1});
    rules[28] = new Rule(-1, new int[]{-1,139,-1});
    rules[29] = new Rule(-1, new int[]{-1,140,-1});
    rules[30] = new Rule(-1, new int[]{-1,141,-1});
    rules[31] = new Rule(-1, new int[]{-1,143,-1});
    rules[32] = new Rule(-1, new int[]{-1,142,-1});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // prog -> stmts
#line 30 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ this.Prog = new Prog(ValueStack[ValueStack.Depth-1].stmts); }
        break;
      case 3: // stmts -> /* empty */
#line 33 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmts = new List<Stmt>(); }
        break;
      case 4: // stmts -> stmts, stmt
#line 34 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ if ((ValueStack[ValueStack.Depth-1].stmt)!=null) ValueStack[ValueStack.Depth-2].stmts.Add(ValueStack[ValueStack.Depth-1].stmt); CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; }
        break;
      case 5: // stmt -> NEWLINE
#line 37 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = null; }
        break;
      case 6: // stmt -> exp, NEWLINE
#line 38 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = new EvalExp(ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 7: // stmt -> ID, '=', exp, NEWLINE
#line 39 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = new Assignment(ValueStack[ValueStack.Depth-4].identifier, ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 8: // stmt -> '{', stmts, '}'
#line 40 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = new Block(ValueStack[ValueStack.Depth-2].stmts); }
        break;
      case 9: // stmt -> IF, '(', exp, ')', stmt
#line 41 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = new If(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].stmt ?? new Block(new List<Stmt>())); }
        break;
      case 10: // stmt -> WHILE, '(', exp, ')', stmt
#line 42 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = new While(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].stmt ?? new Block(new List<Stmt>())); }
        break;
      case 11: // stmt -> PRINT, '(', exp, ')', NEWLINE
#line 43 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.stmt = new Print(ValueStack[ValueStack.Depth-3].exp); }
        break;
      case 12: // exp -> NUM
#line 46 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new IntLiteral(ValueStack[ValueStack.Depth-1].intValue); }
        break;
      case 13: // exp -> TRUE
#line 47 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new BoolLiteral(true); }
        break;
      case 14: // exp -> FALSE
#line 48 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new BoolLiteral(false); }
        break;
      case 15: // exp -> exp, '+', exp
#line 49 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Sum(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 16: // exp -> exp, '-', exp
#line 50 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Subtraction(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 17: // exp -> exp, '*', exp
#line 51 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Product(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 18: // exp -> exp, '/', exp
#line 52 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Division(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 19: // exp -> exp, '%', exp
#line 53 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Remainder(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 20: // exp -> '+', exp
#line 54 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp= ValueStack[ValueStack.Depth-1].exp; }
        break;
      case 21: // exp -> '-', exp
#line 55 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp= new Minus(ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 22: // exp -> exp, '^', exp
#line 56 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Power(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 23: // exp -> MAX, '(', exp, ',', exp, ')'
#line 57 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Max(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 24: // exp -> MIN, '(', exp, ',', exp, ')'
#line 58 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Min(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-2].exp); }
        break;
      case 25: // exp -> '(', exp, ')'
#line 59 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp=ValueStack[ValueStack.Depth-2].exp; }
        break;
      case 26: // exp -> ID
#line 60 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Id(ValueStack[ValueStack.Depth-1].identifier); }
        break;
      case 27: // exp -> '~', exp
#line 61 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Not(ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 28: // exp -> exp, AND, exp
#line 62 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new And(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 29: // exp -> exp, OR, exp
#line 63 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Or(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 30: // exp -> exp, EQUAL, exp
#line 64 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new Equal(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 31: // exp -> exp, LEQ, exp
#line 65 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new LessEqual(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
      case 32: // exp -> exp, LESS_THAN, exp
#line 66 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
{ CurrentSemanticValue.exp = new LessThan(ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 69 "D:\Dropbox\Progetti\C#\DanglingLang\DanglingLang\Tokenizer/DanglingLang.y"
	public Parser(Scanner s) : base(s) {}
}
}
