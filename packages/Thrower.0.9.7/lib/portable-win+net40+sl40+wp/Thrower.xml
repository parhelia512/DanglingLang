<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thrower</name>
    </assembly>
    <members>
        <member name="T:Thrower.RaiseBase">
            <summary>
              Stores items shared by various <see cref="T:Thrower.Raise`1"/> instances.
            </summary>
        </member>
        <member name="F:Thrower.RaiseBase.UseThrowerDefine">
            <summary>
              The define used to enable method compilation.
            </summary>
        </member>
        <member name="F:Thrower.RaiseBase.Flags">
            <summary>
              Flags used to get proper constructors from given exception types.
            </summary>
        </member>
        <member name="F:Thrower.RaiseBase.NoCtorTypes">
            <summary>
              Stores an empty array of <see cref="T:System.Type"/> used to seek constructors without parameters.
            </summary>
        </member>
        <member name="F:Thrower.RaiseBase.StrExCtorTypes">
            <summary>
              Stores the types needed to seek the constructor which takes
              a string and an exception as parameters to instance the exception.
            </summary>
        </member>
        <member name="F:Thrower.RaiseBase.StrCtorType">
            <summary>
              Stores the type needed to seek the constructor which takes
              a string as parameter to instance the exception.
            </summary>
        </member>
        <member name="M:Thrower.RaiseBase.#ctor">
            <summary>
              This class should not be extended by external classes:
              therefore, we have an empty internal constructor.
            </summary>
        </member>
        <member name="T:Thrower.Raise`1">
            <summary>
              Contains methods that throw specified exception <typeparamref name="TEx"/> if given conditions
              will be verified. All methods in this class require that <see cref="F:Thrower.RaiseBase.UseThrowerDefine"/> is
              specified as conditional compilation symbol.
            </summary>
            <typeparam name="TEx">The type of the exceptions thrown if conditions will be satisfied.</typeparam>
            <remarks>
              In order to achieve a good speed, the class caches an instance of the constructors
              found via reflection; therefore, constructors are looked for only once.
            </remarks>
        </member>
        <member name="F:Thrower.Raise`1.ExTypeIsAbstract">
            <summary>
              Stores wheter the exception type is abstract or not. We do this both to provide better
              error messages for the end user and to avoid calling wrong constructors.
            </summary>
        </member>
        <member name="F:Thrower.Raise`1.NoArgsCtor">
            <summary>
              Caches an instance of the constructor which takes no arguments.
              If it does not exist, then this field will be null.
              There must be an instance for each type associated with <see cref="T:Thrower.Raise`1"/>.
            </summary>
        </member>
        <member name="F:Thrower.Raise`1.MsgCtor">
            <summary>
              Caches an instance of the constructor which creates an exception with a message.
              If it does not exist, then this field will be null.
              There must be an instance for each type associated with <see cref="T:Thrower.Raise`1"/>.
            </summary>
            <remarks>
              At first, we look for constructors which take a string and an inner exception, because some 
              standard exceptions (like ArgumentException or ArgumentNullException) have a constructor which takes
              a string as a "parameter name", not as a message. If a constructor with that signature is not found,
              then we look for a constructor with a string as the only argument.
            </remarks>
        </member>
        <member name="F:Thrower.Raise`1.MsgArgCount">
            <summary>
              Keeps the number of arguments required by the constructor
              who creates the exception with a message.
            </summary>
        </member>
        <member name="M:Thrower.Raise`1.#ctor">
            <summary>
              <see cref="T:Thrower.Raise`1"/> must not be instanced.
            </summary>
        </member>
        <member name="M:Thrower.Raise`1.If(System.Boolean)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.If(System.Boolean,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfNot(System.Boolean)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfNot(System.Boolean,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreEqual``2(``0,``1)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified arguments are equal.
            </summary>
            <param name="arg1">First argument to test for equality.</param>
            <param name="arg2">Second argument to test for equality.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments are equal, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreEqual``2(``0,``1,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified arguments are equal.
            </summary>
            <param name="arg1">First argument to test for equality.</param>
            <param name="arg2">Second argument to test for equality.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments are equal, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreNotEqual``2(``0,``1)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified arguments are not equal.
            </summary>
            <param name="arg1">First argument to test for equality.</param>
            <param name="arg2">Second argument to test for equality.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments are not equal, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreNotEqual``2(``0,``1,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified arguments are not equal.
            </summary>
            <param name="arg1">First argument to test for equality.</param>
            <param name="arg2">Second argument to test for equality.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments are not equal, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreSame``2(``0,``1)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified arguments point to the same object.
            </summary>
            <param name="arg1">First argument to test for reference equality.</param>
            <param name="arg2">Second argument to test for reference equality.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments point to the same object, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreSame``2(``0,``1,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified arguments point to the same object.
            </summary>
            <param name="arg1">First argument to test for reference equality.</param>
            <param name="arg2">Second argument to test for reference equality.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments point to the same object, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreNotSame``2(``0,``1)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified arguments do not point to the same object.
            </summary>
            <param name="arg1">First argument to test for reference equality.</param>
            <param name="arg2">Second argument to test for reference equality.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments do not point to the same object, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfAreNotSame``2(``0,``1,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified arguments do not point to the same object.
            </summary>
            <param name="arg1">First argument to test for reference equality.</param>
            <param name="arg2">Second argument to test for reference equality.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If arguments do not point to the same object, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsAssignableFrom(System.Object,System.Type)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if an instance of given type can be assigned to specified object.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type whose instance must be assigned to given object.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If an instance of given type can be assigned to specified object,
              then an exception of type <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if an instance of given type can be assigned to specified object.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type whose instance must be assigned to given object.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If an instance of given type can be assigned to specified object,
              then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotAssignableFrom(System.Object,System.Type)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if an instance of given type cannot be assigned to specified object.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type whose instance must not be assigned to given object.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If an instance of given type cannot be assigned to specified object,
              then an exception of type <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if an instance of given type cannot be assigned to specified object.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type whose instance must not be assigned to given object.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If an instance of given type cannot be assigned to specified object,
              then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsContainedIn(System.Object,System.Collections.IList)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified argument is contained in given collection.
            </summary>
            <param name="argument">The argument to check.</param>
            <param name="collection">The collection that must contain given argument.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="argument"/> is contained, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsContainedIn(System.Object,System.Collections.IList,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified argument is contained in given collection.
            </summary>
            <param name="argument">The argument to check.</param>
            <param name="collection">The collection that must contain given argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="argument"/> is contained, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotContainedIn(System.Object,System.Collections.IList)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified argument is not contained in given collection.
            </summary>
            <param name="argument">The argument to check.</param>
            <param name="collection">The collection that must not contain given argument.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="argument"/> is not contained, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotContainedIn(System.Object,System.Collections.IList,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified argument is not contained in given collection.
            </summary>
            <param name="argument">The argument to check.</param>
            <param name="collection">The collection that must not contain given argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="argument"/> is not contained, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsContainedIn``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified argument is contained in given collection.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="collection">The collection that must contain given argument.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is contained, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsContainedIn``1(``0,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified argument is contained in given collection.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="collection">The collection that must contain given argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is contained, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotContainedIn``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified argument is not contained in given collection.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="collection">The collection that must not contain given argument.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is not contained, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotContainedIn``1(``0,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified argument is not contained in given collection.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="collection">The collection that must not contain given argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is not contained, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsEmpty(System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified string is empty.
            </summary>
            <param name="valueToCheck">The string to check for emptiness.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="valueToCheck"/> is empty, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsEmpty(System.String,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified string is empty.
            </summary>
            <param name="valueToCheck">The string to check for emptiness.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="valueToCheck"/> is empty, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotEmpty(System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified string is not empty.
            </summary>
            <param name="valueToCheck">The string to check for emptiness.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="valueToCheck"/> is not empty, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotEmpty(System.String,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified string is not empty.
            </summary>
            <param name="valueToCheck">The string to check for emptiness.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="valueToCheck"/> is not empty, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsEmpty(System.Collections.ICollection)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified collection is null or empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or empty, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsEmpty(System.Collections.ICollection,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified collection is null or empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or empty, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotEmpty(System.Collections.ICollection)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified collection is null or not empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or not empty, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified collection is null or not empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or not empty, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified collection is null or empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or empty, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified collection is null or empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or empty, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified collection is null or not empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or not empty, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified collection is null or not empty.
            </summary>
            <param name="collection">The collection to check for emptiness.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="collection"/> is null or not empty, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsInstanceOf(System.Object,System.Type)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified object has given type.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type the object must have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="instance"/> has given type, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsInstanceOf(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified object has given type.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type the object must have.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="instance"/> has given type, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotInstanceOf(System.Object,System.Type)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified object has not given type.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type the object must not have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="instance"/> has not given type, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotInstanceOf(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified object has not given type.
            </summary>
            <param name="instance">The object to test.</param>
            <param name="type">The type the object must not have.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="instance"/> has not given type, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNaN(System.Double)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified double is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to test for <see cref="F:System.Double.NaN"/> equality.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="number"/> is <see cref="F:System.Double.NaN"/>, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNaN(System.Double,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified double is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to test for <see cref="F:System.Double.NaN"/> equality.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="number"/> is <see cref="F:System.Double.NaN"/>, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotNaN(System.Double)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified double is not <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to test for <see cref="F:System.Double.NaN"/> equality.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="number"/> is not <see cref="F:System.Double.NaN"/>, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotNaN(System.Double,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified double is not <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to test for <see cref="F:System.Double.NaN"/> equality.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="number"/> is not <see cref="F:System.Double.NaN"/>, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNull``1(``0)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified argument is null.
            </summary>
            <param name="arg">The argument to test for nullity.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is null, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNull``1(``0,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified argument is null.
            </summary>
            <param name="arg">The argument to test for nullity.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is null, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotNull``1(``0)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/>
              if and only if specified argument is not null.
            </summary>
            <param name="arg">The argument to test for nullity.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor
              with no parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is null, then an exception of type
              <typeparamref name="TEx"/> will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have a constructor
              which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:Thrower.Raise`1.IfIsNotNull``1(``0,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified argument is not null.
            </summary>
            <param name="arg">The argument to test for nullity.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as parameters,
              either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>.
              The same exception is thrown when <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="arg"/> is not null, then an exception of type <typeparamref name="TEx"/>,
              with the message specified by <paramref name="message"/>, will be thrown.<br/>
              In order to do that, <typeparamref name="TEx"/> must have either a constructor
              which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> as arguments,
              or a constructor which takes a <see cref="T:System.String"/> as only parameter.<br/>
              If both constructors are available, then the one which takes a <see cref="T:System.String"/>
              and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="T:Thrower.ThrowerException">
            <summary>
              Exception thrown by <see cref="T:Thrower.Raise`1"/> when the type parameter
              passed to that class has something invalid (missing constructors, etc).
            </summary>
        </member>
    </members>
</doc>
